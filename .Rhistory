estBetaParams <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
for(i in 1:length(x)) {
est = estBetaParams(x[i], v)
a = est$alpha
b = est$beta
X = c(X, rbeta(N, a, b))
}
for(i in 1:length(y)) {
est = estBetaParams(y[i], v)
a = est$alpha
b = est$beta
Y = c(Y, rbeta(N, a, b))
}
plot(X,Y, xlim = c(0,1), ylim = c(0,1))
n = 10
x = runif(n, 0, 1)
y = runif(n, 0, 1)
N = 10
X = as.vector(NULL)
Y = as.vector(NULL)
v = 0.01
estBetaParams <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
for(i in 1:length(x)) {
est = estBetaParams(x[i], v)
a = est$alpha
b = est$beta
X = c(X, rbeta(N, a, b))
}
for(i in 1:length(y)) {
est = estBetaParams(y[i], v)
a = est$alpha
b = est$beta
Y = c(Y, rbeta(N, a, b))
}
plot(X,Y, xlim = c(0,1), ylim = c(0,1))
n = 10
x = runif(n, 0, 1)
y = runif(n, 0, 1)
N = 10
X = as.vector(NULL)
Y = as.vector(NULL)
v = 0.01
estBetaParams <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
for(i in 1:length(x)) {
est = estBetaParams(x[i], v)
a = est$alpha
b = est$beta
X = c(X, rbeta(N, a, b))
}
for(i in 1:length(y)) {
est = estBetaParams(y[i], v)
a = est$alpha
b = est$beta
Y = c(Y, rbeta(N, a, b))
}
plot(X,Y, xlim = c(0,1), ylim = c(0,1))
n = 10
x = runif(n, 0, 1)
y = runif(n, 0, 1)
N = 10
X = as.vector(NULL)
Y = as.vector(NULL)
v = 0.005
estBetaParams <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
for(i in 1:length(x)) {
est = estBetaParams(x[i], v)
a = est$alpha
b = est$beta
X = c(X, rbeta(N, a, b))
}
for(i in 1:length(y)) {
est = estBetaParams(y[i], v)
a = est$alpha
b = est$beta
Y = c(Y, rbeta(N, a, b))
}
plot(X,Y, xlim = c(0,1), ylim = c(0,1))
n = 10
x = runif(n, 0, 1)
y = runif(n, 0, 1)
N = 10
X = as.vector(NULL)
Y = as.vector(NULL)
v = 0.005
estBetaParams <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
for(i in 1:length(x)) {
est = estBetaParams(x[i], v)
a = est$alpha
b = est$beta
X = c(X, rbeta(N, a, b))
}
for(i in 1:length(y)) {
est = estBetaParams(y[i], v)
a = est$alpha
b = est$beta
Y = c(Y, rbeta(N, a, b))
}
plot(X,Y, xlim = c(0,1), ylim = c(0,1))
n = 10
x = runif(n, 0, 1)
y = runif(n, 0, 1)
N = 10
X = as.vector(NULL)
Y = as.vector(NULL)
v = 0.005
estBetaParams <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
for(i in 1:length(x)) {
est = estBetaParams(x[i], v)
a = est$alpha
b = est$beta
X = c(X, rbeta(N, a, b))
}
for(i in 1:length(y)) {
est = estBetaParams(y[i], v)
a = est$alpha
b = est$beta
Y = c(Y, rbeta(N, a, b))
}
plot(X,Y, xlim = c(0,1), ylim = c(0,1))
n = 10
x = runif(n, 0, 1)
y = runif(n, 0, 1)
N = 10
X = as.vector(NULL)
Y = as.vector(NULL)
v = 0.005
estBetaParams <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
for(i in 1:length(x)) {
est = estBetaParams(x[i], v)
a = est$alpha
b = est$beta
X = c(X, rbeta(N, a, b))
}
for(i in 1:length(y)) {
est = estBetaParams(y[i], v)
a = est$alpha
b = est$beta
Y = c(Y, rbeta(N, a, b))
}
plot(X,Y, xlim = c(0,1), ylim = c(0,1))
n = 10
x = runif(n, 0, 1)
y = runif(n, 0, 1)
N = 10
X = as.vector(NULL)
Y = as.vector(NULL)
v = 0.005
estBetaParams <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
for(i in 1:length(x)) {
est = estBetaParams(x[i], v)
a = est$alpha
b = est$beta
X = c(X, rbeta(N, a, b))
}
for(i in 1:length(y)) {
est = estBetaParams(y[i], v)
a = est$alpha
b = est$beta
Y = c(Y, rbeta(N, a, b))
}
plot(X,Y, xlim = c(0,1), ylim = c(0,1))
n = 10
x = runif(n, 0, 1)
y = runif(n, 0, 1)
N = 10
X = as.vector(NULL)
Y = as.vector(NULL)
v = 0.005
estBetaParams <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
for(i in 1:length(x)) {
est = estBetaParams(x[i], v)
a = est$alpha
b = est$beta
X = c(X, rbeta(N, a, b))
}
for(i in 1:length(y)) {
est = estBetaParams(y[i], v)
a = est$alpha
b = est$beta
Y = c(Y, rbeta(N, a, b))
}
plot(X,Y, xlim = c(0,1), ylim = c(0,1))
n = 10
x = runif(n, 0, 1)
y = runif(n, 0, 1)
N = 10
X = as.vector(NULL)
Y = as.vector(NULL)
v = 0.005
estBetaParams <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
for(i in 1:length(x)) {
est = estBetaParams(x[i], v)
a = est$alpha
b = est$beta
X = c(X, rbeta(N, a, b))
}
for(i in 1:length(y)) {
est = estBetaParams(y[i], v)
a = est$alpha
b = est$beta
Y = c(Y, rbeta(N, a, b))
}
plot(X,Y, xlim = c(0,1), ylim = c(0,1))
n = 10
x = runif(n, 0, 1)
y = runif(n, 0, 1)
N = 10
X = as.vector(NULL)
Y = as.vector(NULL)
v = 0.005
estBetaParams <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
for(i in 1:length(x)) {
est = estBetaParams(x[i], v)
a = est$alpha
b = est$beta
X = c(X, rbeta(N, a, b))
}
for(i in 1:length(y)) {
est = estBetaParams(y[i], v)
a = est$alpha
b = est$beta
Y = c(Y, rbeta(N, a, b))
}
plot(X,Y, xlim = c(0,1), ylim = c(0,1))
matrix(NA, 10, 10)
### Data processing - COMBINED OUTPUTS
source("helpers.R")
set1a = readRDS("sim_set_2/OUT.Rds")
set1b = readRDS("sim_set_2a/OUT.Rds")
set1 = c(set1a, set1b)
set2a = readRDS("sim_set_3/OUT.Rds")
set2b = readRDS("sim_set_3a/OUT.Rds")
set2 = c(set2a, set2b)
set3a = readRDS("sim_set_4/OUT.Rds")
set3b = readRDS("sim_set_4a/OUT.Rds")
set3 = c(set3a, set3b)
get_set_pars = function(x) {
paras = as.data.frame(NULL)
for(i in 1:length(x)) {
paras = rbind(paras, as.data.frame(x[[i]]$paras))
}
return(paras)
}
get_set_data = function(set, paras) {
### Calculate extinctions and length of sim "run" (i.e. number of years achieved)
paras$EXT_PROP = NA
paras$MEAN_TIME = NA
paras$MEAN_R = NA
paras$MEAN_R0 = NA
for(i in 1:length(set)) {
dat_i = set[[i]]$data
sim_length = NULL
n0 = paras[i, "RESOURCE_INI"]
time_max = paras[i, "TIME_MAX"]
### All resource runs for sim i:
res_i = lapply(dat_i, function(x) x$resources[,2])
### Durations for each sim:
duration_i = unlist(lapply(res_i,length))
### Exinct runs in sim i:
ext_i = duration_i!=time_max
### Final N for each sim:
nX = unlist(lapply(res_i, function(x) tail(x,1)))
nX0 = nX
nX0[ext_i] = 0
### Proportions extinct:
paras[i, "EXT_PROP"] = sum(ext_i)/length(set)
### Mean duration:
paras[i, "MEAN_TIME"] = mean(duration_i)
### Mean pop growth rates.
### R is N(final)-N(initial)/N(initial), R0 is the same but using zero for N(final) if the pop went extinct.
paras[i, "MEAN_R"] = mean((nX-paras[i,"RESOURCE_INI"])/paras[i,"RESOURCE_INI"])
paras[i, "MEAN_R0"] = mean((nX0-paras[i,"RESOURCE_INI"])/paras[i,"RESOURCE_INI"])
}
return(paras)
}
set1_par = get_set_pars(set1)
set1_par = get_set_data(set = set1, paras = set1_par)
set2_par = get_set_pars(set2)
set2_par = get_set_data(set = set2, paras = set2_par)
set3_par = get_set_pars(set3)
set3_par = get_set_data(set = set3, paras = set3_par)
plot.new()
zlo = min(set1_par$EXT_PROP,set2_par$EXT_PROP,set3_par$EXT_PROP)
zhi = max(set1_par$EXT_PROP,set2_par$EXT_PROP,set3_par$EXT_PROP)
par(new = "TRUE",plt = c(0.1,0.35,0.175,0.9),las = 1,cex.axis = 1)
xcoords = unique(set1_par$OWNERSHIP_VAR)
ycoords = unique(set1_par$USR_BUDGET_RNG)
surface.matrix = matrix(set1_par$EXT_PROP,nrow=length(xcoords),ncol=length(ycoords),byrow=T)
filled.contour3(xcoords,ycoords,surface.matrix,
col=rev(hcl.colors(30, "Reds")),
xlab = "",ylab = "Budget variation", cex.lab = 1.5,
xlim = c(min(xcoords),max(xcoords)),
ylim = c(min(ycoords),max(ycoords)),
zlim = c(zlo,zhi))
par(xpd = NA)
text(x=0.225,y=475,"(a) 0% yield to budget",cex = 1.5, adj =0.5)
par(new = "TRUE",plt = c(0.375,0.625,0.175,0.9),las = 1,cex.axis = 1)
xcoords = unique(set2_par$OWNERSHIP_VAR)
ycoords = unique(set2_par$USR_BUDGET_RNG)
surface.matrix = matrix(set2_par$EXT_PROP,nrow=length(xcoords),ncol=length(ycoords),byrow=T)
filled.contour3(xcoords,ycoords,surface.matrix,
col=rev(hcl.colors(30, "Reds")),
xlab = "Land ownership variation",ylab = "", cex.lab = 1.5,
xlim = c(min(xcoords),max(xcoords)),
ylim = c(min(ycoords),max(ycoords)),
zlim = c(zlo,zhi), axes = FALSE)
box()
axis(1, at = seq(range(round(xcoords,1))[1],range(round(xcoords,1))[2],0.1))
axis(2, pretty(ycoords)[1:5], labels = NA)
text(x=0.225,y=475,"(b) 25% yield to budget",cex = 1.5, adj = 0.5)
par(new = "TRUE",plt = c(0.65,0.9,0.175,0.9),las = 1,cex.axis = 1)
xcoords = unique(set3_par$OWNERSHIP_VAR)
ycoords = unique(set3_par$USR_BUDGET_RNG)
surface.matrix = matrix(set3_par$EXT_PROP,nrow=length(xcoords),ncol=length(ycoords),byrow=T)
filled.contour3(xcoords,ycoords,surface.matrix,
col=rev(hcl.colors(20, "Reds")),
xlab = "",ylab = "",
xlim = c(min(xcoords),max(xcoords)),
ylim = c(min(ycoords),max(ycoords)),
zlim = c(zlo,zhi), axes = FALSE)
box()
axis(1, at = seq(range(round(xcoords,1))[1],range(round(xcoords,1))[2],0.1))
axis(2, pretty(ycoords)[1:5], labels = NA)
text(x=0.225,y=475,"(c) 50% yield to budget",cex = 1.5, adj = 0.5)
par(new = "TRUE",plt = c(0.925,0.95,0.275,0.8),las = 1,cex.axis = 1)
flength = sum(length(set1_par$EXT_PROP),length(set2_par$EXT_PROP),length(set3_par$EXT_PROP))
surface.matrix = matrix(c(set1_par$EXT_PROP,set2_par$EXT_PROP,set2_par$EXT_PROP,set2_par$EXT_PROP,set2_par$EXT_PROP),flength,flength)
xcoords = 1:flength
ycoords = 1:flength
filled.legend(xcoords,ycoords,surface.matrix,
col = rev(hcl.colors(20, "Reds")),
xlab = "",ylab = "",
xlim = c(min(xintercepts),max(xintercepts)),
ylim = c(min(slopes),max(slopes)),
zlim = c(zlo,zhi))
plot.new()
zlo = min(set1_par$MEAN_R,set2_par$MEAN_R,set3_par$MEAN_R)
zhi = max(set1_par$MEAN_R,set2_par$MEAN_R,set3_par$MEAN_R)
par(new = "TRUE",plt = c(0.1,0.35,0.175,0.9),las = 1,cex.axis = 1)
xcoords = unique(set1_par$OWNERSHIP_VAR)
ycoords = unique(set1_par$USR_BUDGET_RNG)
surface.matrix = matrix(set1_par$MEAN_R,nrow=length(xcoords),ncol=length(ycoords),byrow=T)
filled.contour3(xcoords,ycoords,surface.matrix,
color.palette = function(n, x) scale_cols(n, x=surface.matrix),
xlab = "",ylab = "Budget variation", cex.lab = 1.5,
xlim = c(min(xcoords),max(xcoords)),
ylim = c(min(ycoords),max(ycoords)),
zlim = c(zlo,zhi))
par(xpd = NA)
text(x=0.225,y=475,"(a) 0% yield to budget",cex = 1.5, adj =0.5)
par(new = "TRUE",plt = c(0.375,0.625,0.175,0.9),las = 1,cex.axis = 1)
xcoords = unique(set2_par$OWNERSHIP_VAR)
ycoords = unique(set2_par$USR_BUDGET_RNG)
surface.matrix = matrix(set2_par$MEAN_R,nrow=length(xcoords),ncol=length(ycoords),byrow=T)
filled.contour3(xcoords,ycoords,surface.matrix,
color.palette = function(n, x) scale_cols(n, x=surface.matrix),
xlab = "Land ownership variation",ylab = "", cex.lab = 1.5,
xlim = c(min(xcoords),max(xcoords)),
ylim = c(min(ycoords),max(ycoords)),
zlim = c(zlo,zhi), axes = FALSE)
box()
axis(1, at = seq(range(round(xcoords,1))[1],range(round(xcoords,1))[2],0.1))
axis(2, pretty(ycoords)[1:5], labels = NA)
text(x=0.225,y=475,"(b) 25% yield to budget",cex = 1.5, adj = 0.5)
par(new = "TRUE",plt = c(0.65,0.9,0.175,0.9),las = 1,cex.axis = 1)
xcoords = unique(set3_par$OWNERSHIP_VAR)
ycoords = unique(set3_par$USR_BUDGET_RNG)
surface.matrix = matrix(set3_par$MEAN_R,nrow=length(xcoords),ncol=length(ycoords),byrow=T)
filled.contour3(xcoords,ycoords,surface.matrix,
color.palette = function(n, x) scale_cols(n, x=surface.matrix),
xlab = "",ylab = "",
xlim = c(min(xcoords),max(xcoords)),
ylim = c(min(ycoords),max(ycoords)),
zlim = c(zlo,zhi), axes = FALSE)
box()
axis(1, at = seq(range(round(xcoords,1))[1],range(round(xcoords,1))[2],0.1))
axis(2, pretty(ycoords)[1:5], labels = NA)
text(x=0.225,y=475,"(c) 50% yield to budget",cex = 1.5, adj = 0.5)
par(new = "TRUE",plt = c(0.925,0.95,0.275,0.8),las = 1,cex.axis = 1)
surface.matrix = matrix(c(set1_par$MEAN_R,set2_par$MEAN_R,set3_par$MEAN_R,),300,300)
xcoords = 1:300
surface.matrix = matrix(c(set1_par$MEAN_R,set2_par$MEAN_R,set3_par$MEAN_R),300,300)
xcoords = 1:300
ycoords = 1:300
filled.legend(xcoords,ycoords,surface.matrix,
color.palette = function(n, x) scale_cols(n, x=surface.matrix),
xlab = "",ylab = "",
xlim = c(min(xintercepts),max(xintercepts)),
ylim = c(min(slopes),max(slopes)),
zlim = c(zlo,zhi))
8495-275
8495-275-335
seq(0,0.7,0.05)
seq(0,0.45,0.05)
length(seq(0,0.45,0.05))
### GMSE sims in parallel
rm(list=ls())
library(GMSE)
library(parallel)
library(doParallel)
library(foreach)
source("helpers.R")
foldername = "sim_set_5"
YRS = 20
SIMS = 100
par(mfrow=c(1,1))
OUT = list()
#PARS = expand.grid(STAKEHOLDERS = 12, USR_YLD_BUDGET = seq(0,0.45,0.05), OWNERSHIP_VAR = seq(0.1,1,0.1))
PARS = expand.grid(TIME_MAX = YRS,
RESOURCE_INI = 1000,
CONSUME_SURV = 2,
CONSUME_REPR = 3,
TIMES_FEEDING = 6,
REMOVE_PR = 0.1,
LAND_OWNERSHIP = TRUE,
SCARING = TRUE,
TEND_CROPS = TRUE,
TEND_CROP_YLD = 0.2,
USR_YLD_BUDGET = 0,
STAKEHOLDERS = 12,
USER_BUDGET = 1000,
PUBLIC_LAND = 0.25,
USR_BUDGET_RNG = seq(0,450,50),
OWNERSHIP_VAR = seq(0,0.45,0.05)
)
for(k in 1:nrow(PARS)) {
#cat(sprintf("\n"), file = "foreach_log.txt", append = TRUE)
cat(sprintf("\n%s - parameter set %d / %s.. \n\n", Sys.time(), k, nrow(PARS)), file = paste0(foldername,"/foreach_log.txt"), append = TRUE)
cat(sprintf("\n%s - parameter set %d / %s..", Sys.time(), k, nrow(PARS)))
cl = makeCluster(6,outfile="foreach_log.txt")
registerDoParallel(cl = cl)
results <- foreach(i=1:SIMS, .export=c('gmse'), .packages=c('GMSE')) %dopar% {
gmse(time_max = PARS$TIME_MAX[k],
RESOURCE_ini = PARS$RESOURCE_INI[k],
consume_surv = PARS$CONSUME_SURV[k],
consume_repr = PARS$CONSUME_REPR[k],
times_feeding = PARS$TIMES_FEEDING[k],
remove_pr = PARS$REMOVE_PR[k],
land_ownership = PARS$LAND_OWNERSHIP[k],
scaring = PARS$SCARING[k],
tend_crops = PARS$TEND_CROPS[k],
tend_crop_yld = PARS$TEND_CROP_YLD[k],
usr_yld_budget = PARS$USR_YLD_BUDGET[k],
stakeholders = PARS$STAKEHOLDERS[k],
user_budget = PARS$USER_BUDGET[k],
usr_budget_rng = PARS$USR_BUDGET_RNG[k],
ownership_var = PARS$OWNERSHIP_VAR[k],
plotting = FALSE)
}
### Get results summary:
res_summary = list(data = lapply(results, gmse_summary))
### Add resource positions to summary:
# res_positions = get_res_pos(results)
# for(z in 1:length(res_summary$data)) {
#   res_summary$data[[z]]$res_positions = res_positions[[z]]
# }
### Get and save parameters with output list:
pars = as.list(as.matrix(PARS[k,]))
names(pars) = names(PARS)
res_summary$paras = pars
#rm(results, res_positions)
rm(results)
OUT[[k]] = res_summary
gc()
stopCluster(cl)
}
saveRDS(OUT, paste0(foldername,"/OUT.Rds"))
library(rjson)
