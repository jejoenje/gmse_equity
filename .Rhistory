color.palette = function(m) scale_cols(m,11),
main = "Mean growth rate", xaxt = "n")
scale_cols(m,11)
hcl.colors(n, "YlOrRd", rev = TRUE)
hcl.colors(10, "YlOrRd", rev = TRUE)
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
color.palette = function(n) hcl.colors(n, "YlOrRd", rev = TRUE),
main = "Mean growth rate", xaxt = "n")
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
color.palette = function(n) hcl.colors(n, "RdYlBu", rev = TRUE),
main = "Mean growth rate", xaxt = "n")
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
color.palette = function(n) hcl.colors(n, "RdYlBu"),
main = "Mean growth rate", xaxt = "n")
hcl.colors(n, "RdYlBu")
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels =10, color.palette = function(n) hcl.colors(n, "RdYlBu"),
main = "Mean growth rate", xaxt = "n")
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 20, color.palette = function(n) hcl.colors(n, "RdYlBu"),
main = "Mean growth rate", xaxt = "n")
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 30, color.palette = function(n) hcl.colors(n, "RdYlBu"),
main = "Mean growth rate", xaxt = "n")
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 100, color.palette = function(n) hcl.colors(n, "RdYlBu"),
main = "Mean growth rate", xaxt = "n")
scale_cols = function(x,nl) {
xl = seq(min(x),max(x),(max(x)-min(x))/nl)
zero_pos =(1:length(xl))-which.min(abs(xl)); zero_pos
cols = hcl.colors(max(abs(zero_pos))*2,"RdYlBu")
mid_pos = floor(length(cols)/2)
return(cols[zero_pos+mid_pos])
}
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 100, color.palette = function(n,m) scale_cols(x=m, nl=n),
main = "Mean growth rate", xaxt = "n")
m
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 100, color.palette = function(n,m=m) scale_cols(x=m, nl=n),
main = "Mean growth rate", xaxt = "n")
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 100, color.palette = scale_cols(x=m, nl=n),
main = "Mean growth rate", xaxt = "n")
scale_cols = function(nl,x) {
xl = seq(min(x),max(x),(max(x)-min(x))/nl)
zero_pos =(1:length(xl))-which.min(abs(xl)); zero_pos
cols = hcl.colors(max(abs(zero_pos))*2,"RdYlBu")
mid_pos = floor(length(cols)/2)
return(cols[zero_pos+mid_pos])
}
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 100, color.palette = scale_cols(n, x=m),
main = "Mean growth rate", xaxt = "n")
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 100, color.palette = scale_cols(10, x=m),
main = "Mean growth rate", xaxt = "n")
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 100, color.palette = function(n, x) scale_cols(n, x=m),
main = "Mean growth rate", xaxt = "n")
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 10, color.palette = function(n, x) scale_cols(n, x=m),
main = "Mean growth rate", xaxt = "n")
meanR_matrix = xtabs(MEAN_R ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
m = meanR_matrix
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 10, color.palette = function(n, x) scale_cols(n, x=m),
main = "Mean growth rate", xaxt = "n")
m = meanR_matrix+0.2
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 10, color.palette = function(n, x) scale_cols(n, x=m),
main = "Mean growth rate", xaxt = "n")
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 20, color.palette = function(n, x) scale_cols(n, x=m),
main = "Mean growth rate", xaxt = "n")
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 30, color.palette = function(n, x) scale_cols(n, x=m),
main = "Mean growth rate", xaxt = "n")
meanR_matrix = xtabs(MEAN_R ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 100, color.palette = function(n, x) scale_cols(n, x=m),
main = "Mean growth rate", xaxt = "n")
scale_cols = function(nl,x) {
xl = seq(min(x),max(x),(max(x)-min(x))/nl)
zero_pos =(1:length(xl))-which.min(abs(xl)); zero_pos
cols = hcl.colors(max(abs(zero_pos))*2,"RdYlBu")
mid_pos = floor(length(cols)/2)
return(cols[zero_pos+mid_pos])
}
meanR_matrix = xtabs(MEAN_R ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 100, color.palette = function(n, x) scale_cols(n, x=m),
main = "Mean growth rate", xaxt = "n")
meanR_matrix = xtabs(MEAN_R ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 50, color.palette = function(n, x) scale_cols(n, x=m),
main = "Mean growth rate", xaxt = "n")
scale_cols = function(nl,x) {
xl = seq(min(x),max(x),(max(x)-min(x))/nl)
zero_pos =(1:length(xl))-which.min(abs(xl)); zero_pos
cols = hcl.colors(max(abs(zero_pos))*2,"RdBu")
mid_pos = floor(length(cols)/2)
return(cols[zero_pos+mid_pos])
}
meanR_matrix = xtabs(MEAN_R ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 50, color.palette = function(n, x) scale_cols(n, x=m),
main = "Mean growth rate", xaxt = "n")
meanR_matrix = xtabs(MEAN_R ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 10, color.palette = function(n, x) scale_cols(n, x=m),
main = "Mean growth rate", xaxt = "n")
meanE_matrix = xtabs(EXT_PROP ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
#meanE_matrix = meanE_matrix[1:5,1:10]
filled.contour(z = meanE_matrix, x = as.numeric(rownames(meanE_matrix)), y = as.numeric(colnames(meanE_matrix)),
xlab = "Ownership variation", ylab = "Budget variation",
nlevels = 10, col = rev(hcl.colors(10, "Reds")),
main = "Mean extinction probability", xaxt = "n")
scale_cols = function(nl,x) {
xl = seq(min(x),max(x),(max(x)-min(x))/nl)
zero_pos =(1:length(xl))-which.min(abs(xl)); zero_pos
cols = hcl.colors(max(abs(zero_pos))*2,"RdBu")
mid_pos = floor(length(cols)/2)
return(cols[zero_pos+mid_pos])
}
meanR_matrix = xtabs(MEAN_R ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 10, color.palette = function(n, x) scale_cols(n, x=m),
main = "Mean growth rate", xaxt = "n")
rm(list=ls())
### Data processing
source("helpers.R")
out = readRDS("sim_set_3/OUT.Rds")
### Reconstitute parameter values:
paras = as.data.frame(NULL)
for(i in 1:length(out)) {
paras = rbind(paras, as.data.frame(out[[i]]$paras))
}
### Calculate extinctions and length of sim "run" (i.e. number of years achieved)
paras$EXT_PROP = NA
paras$MEAN_TIME = NA
paras$MEAN_R = NA
paras$MEAN_R0 = NA
for(i in 1:length(out)) {
dat_i = out[[i]]$data
sim_length = NULL
n0 = paras[i, "RESOURCE_INI"]
time_max = paras[i, "TIME_MAX"]
### All resource runs for sim i:
res_i = lapply(dat_i, function(x) x$resources[,2])
### Durations for each sim:
duration_i = unlist(lapply(res_i,length))
### Exinct runs in sim i:
ext_i = duration_i!=time_max
### Final N for each sim:
nX = unlist(lapply(res_i, function(x) tail(x,1)))
nX0 = nX
nX0[ext_i] = 0
### Proportions extinct:
paras[i, "EXT_PROP"] = sum(ext_i)/length(out)
### Mean duration:
paras[i, "MEAN_TIME"] = mean(duration_i)
### Mean pop growth rates.
### R is N(final)-N(initial)/N(initial), R0 is the same but using zero for N(final) if the pop went extinct.
paras[i, "MEAN_R"] = mean((nX-paras[i,"RESOURCE_INI"])/paras[i,"RESOURCE_INI"])
paras[i, "MEAN_R0"] = mean((nX0-paras[i,"RESOURCE_INI"])/paras[i,"RESOURCE_INI"])
}
par(mfrow = c(1,2))
meanE_matrix = xtabs(EXT_PROP ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
#meanE_matrix = meanE_matrix[1:5,1:10]
filled.contour(z = meanE_matrix, x = as.numeric(rownames(meanE_matrix)), y = as.numeric(colnames(meanE_matrix)),
xlab = "Ownership variation", ylab = "Budget variation",
nlevels = 10, col = rev(hcl.colors(10, "Reds")),
main = "Mean extinction probability", xaxt = "n")
scale_cols = function(nl,x) {
xl = seq(min(x),max(x),(max(x)-min(x))/nl)
zero_pos =(1:length(xl))-which.min(abs(xl)); zero_pos
cols = hcl.colors(max(abs(zero_pos))*2,"RdBu")
mid_pos = floor(length(cols)/2)
return(cols[zero_pos+mid_pos])
}
meanR_matrix = xtabs(MEAN_R ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 10, color.palette = function(n, x) scale_cols(n, x=m),
main = "Mean growth rate", xaxt = "n")
m = meanR_matrix
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 10, color.palette = function(n, x) scale_cols(n, x=m),
main = "Mean growth rate", xaxt = "n")
m
### Data processing
source("helpers.R")
out = readRDS("sim_set_4/OUT.Rds")
### Reconstitute parameter values:
paras = as.data.frame(NULL)
for(i in 1:length(out)) {
paras = rbind(paras, as.data.frame(out[[i]]$paras))
}
### Calculate extinctions and length of sim "run" (i.e. number of years achieved)
paras$EXT_PROP = NA
paras$MEAN_TIME = NA
paras$MEAN_R = NA
paras$MEAN_R0 = NA
for(i in 1:length(out)) {
dat_i = out[[i]]$data
sim_length = NULL
n0 = paras[i, "RESOURCE_INI"]
time_max = paras[i, "TIME_MAX"]
### All resource runs for sim i:
res_i = lapply(dat_i, function(x) x$resources[,2])
### Durations for each sim:
duration_i = unlist(lapply(res_i,length))
### Exinct runs in sim i:
ext_i = duration_i!=time_max
### Final N for each sim:
nX = unlist(lapply(res_i, function(x) tail(x,1)))
nX0 = nX
nX0[ext_i] = 0
### Proportions extinct:
paras[i, "EXT_PROP"] = sum(ext_i)/length(out)
### Mean duration:
paras[i, "MEAN_TIME"] = mean(duration_i)
### Mean pop growth rates.
### R is N(final)-N(initial)/N(initial), R0 is the same but using zero for N(final) if the pop went extinct.
paras[i, "MEAN_R"] = mean((nX-paras[i,"RESOURCE_INI"])/paras[i,"RESOURCE_INI"])
paras[i, "MEAN_R0"] = mean((nX0-paras[i,"RESOURCE_INI"])/paras[i,"RESOURCE_INI"])
}
par(mfrow = c(1,2))
meanE_matrix = xtabs(EXT_PROP ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
#meanE_matrix = meanE_matrix[1:5,1:10]
filled.contour(z = meanE_matrix, x = as.numeric(rownames(meanE_matrix)), y = as.numeric(colnames(meanE_matrix)),
xlab = "Ownership variation", ylab = "Budget variation",
nlevels = 10, col = rev(hcl.colors(10, "Reds")),
main = "Mean extinction probability", xaxt = "n")
#meanE_matrix = meanE_matrix[1:5,1:10]
filled.contour(z = meanE_matrix, x = as.numeric(rownames(meanE_matrix)), y = as.numeric(colnames(meanE_matrix)),
xlab = "Ownership variation", ylab = "Budget variation",
nlevels = 10, col = rev(hcl.colors(10, "Reds")),
main = "Mean extinction probability", xaxt = "n")
meanR_matrix = xtabs(MEAN_R ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
m = meanR_matrix
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 10, color.palette = function(n, x) scale_cols(n, x=m),
main = "Mean growth rate", xaxt = "n")
?layou
?layout
matrix(1,2,3,4)
matrix(c(1,2,3,4),2,2)
layout(matrix(c(1,2,3,4),2,2))
par(mfrow = c(1,2))
meanE_matrix = xtabs(EXT_PROP ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
#meanE_matrix = meanE_matrix[1:5,1:10]
filled.contour(z = meanE_matrix, x = as.numeric(rownames(meanE_matrix)), y = as.numeric(colnames(meanE_matrix)),
xlab = "Ownership variation", ylab = "Budget variation",
nlevels = 10, col = rev(hcl.colors(10, "Reds")),
main = "Mean extinction probability", xaxt = "n")
scale_cols = function(nl,x) {
xl = seq(min(x),max(x),(max(x)-min(x))/nl)
zero_pos =(1:length(xl))-which.min(abs(xl)); zero_pos
cols = hcl.colors(max(abs(zero_pos))*2,"RdBu")
mid_pos = floor(length(cols)/2)
return(cols[zero_pos+mid_pos])
}
meanR_matrix = xtabs(MEAN_R ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
m = meanR_matrix
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 10, color.palette = function(n, x) scale_cols(n, x=m),
main = "Mean growth rate", xaxt = "n")
nl = 10
x = m
x
xl = seq(min(x),max(x),(max(x)-min(x))/nl)
xl
xl>0
xl<0
xl<0
sum(xl<0)
length(xl) = sum(xl<0)
xl
xl = seq(min(x),max(x),(max(x)-min(x))/nl)
zero_pos =(1:length(xl))-which.min(abs(xl)); zero_pos
zero_pos
cols = hcl.colors(max(abs(zero_pos))*2,"RdBu")
cols
mid_pos = floor(length(cols)/2)
mid_pos = floor(length(cols)/2)
mid_pos
cols[zero_pos+mid_pos]
xl>0
sum(xl>0)
sum(xl<0)
scale_cols = function(nl,x) {
xl = seq(min(x),max(x),(max(x)-min(x))/nl)
colpal = "RdBu"
if(sum(xl<0)==length(xl)) {
colpal = "Reds"
}
if(sum(xl>0)==length(xl)) {
colpal = "Purples"
}
zero_pos =(1:length(xl))-which.min(abs(xl)); zero_pos
cols = hcl.colors(max(abs(zero_pos))*2,colpal)
mid_pos = floor(length(cols)/2)
return(cols[zero_pos+mid_pos])
}
meanR_matrix = xtabs(MEAN_R ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
m = meanR_matrix
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 10, color.palette = function(n, x) scale_cols(n, x=m),
main = "Mean growth rate", xaxt = "n")
### Data processing
source("helpers.R")
out = readRDS("sim_set_3/OUT.Rds")
### Reconstitute parameter values:
paras = as.data.frame(NULL)
for(i in 1:length(out)) {
paras = rbind(paras, as.data.frame(out[[i]]$paras))
}
### Calculate extinctions and length of sim "run" (i.e. number of years achieved)
paras$EXT_PROP = NA
paras$MEAN_TIME = NA
paras$MEAN_R = NA
paras$MEAN_R0 = NA
for(i in 1:length(out)) {
dat_i = out[[i]]$data
sim_length = NULL
n0 = paras[i, "RESOURCE_INI"]
time_max = paras[i, "TIME_MAX"]
### All resource runs for sim i:
res_i = lapply(dat_i, function(x) x$resources[,2])
### Durations for each sim:
duration_i = unlist(lapply(res_i,length))
### Exinct runs in sim i:
ext_i = duration_i!=time_max
### Final N for each sim:
nX = unlist(lapply(res_i, function(x) tail(x,1)))
nX0 = nX
nX0[ext_i] = 0
### Proportions extinct:
paras[i, "EXT_PROP"] = sum(ext_i)/length(out)
### Mean duration:
paras[i, "MEAN_TIME"] = mean(duration_i)
### Mean pop growth rates.
### R is N(final)-N(initial)/N(initial), R0 is the same but using zero for N(final) if the pop went extinct.
paras[i, "MEAN_R"] = mean((nX-paras[i,"RESOURCE_INI"])/paras[i,"RESOURCE_INI"])
paras[i, "MEAN_R0"] = mean((nX0-paras[i,"RESOURCE_INI"])/paras[i,"RESOURCE_INI"])
}
par(mfrow = c(1,2))
meanE_matrix = xtabs(EXT_PROP ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
#meanE_matrix = meanE_matrix[1:5,1:10]
filled.contour(z = meanE_matrix, x = as.numeric(rownames(meanE_matrix)), y = as.numeric(colnames(meanE_matrix)),
xlab = "Ownership variation", ylab = "Budget variation",
nlevels = 10, col = rev(hcl.colors(10, "Reds")),
main = "Mean extinction probability", xaxt = "n")
scale_cols = function(nl,x) {
xl = seq(min(x),max(x),(max(x)-min(x))/nl)
colpal = "RdBu"
if(sum(xl<0)==length(xl)) {
colpal = "Reds"
}
if(sum(xl>0)==length(xl)) {
colpal = "Purples"
}
zero_pos =(1:length(xl))-which.min(abs(xl)); zero_pos
cols = hcl.colors(max(abs(zero_pos))*2,colpal)
mid_pos = floor(length(cols)/2)
return(cols[zero_pos+mid_pos])
}
meanR_matrix = xtabs(MEAN_R ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
m = meanR_matrix
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 10, color.palette = function(n, x) scale_cols(n, x=m),
main = "Mean growth rate", xaxt = "n")
### Data processing
source("helpers.R")
out = readRDS("sim_set_2/OUT.Rds")
### Reconstitute parameter values:
paras = as.data.frame(NULL)
for(i in 1:length(out)) {
paras = rbind(paras, as.data.frame(out[[i]]$paras))
}
### Calculate extinctions and length of sim "run" (i.e. number of years achieved)
paras$EXT_PROP = NA
paras$MEAN_TIME = NA
paras$MEAN_R = NA
paras$MEAN_R0 = NA
for(i in 1:length(out)) {
dat_i = out[[i]]$data
sim_length = NULL
n0 = paras[i, "RESOURCE_INI"]
time_max = paras[i, "TIME_MAX"]
### All resource runs for sim i:
res_i = lapply(dat_i, function(x) x$resources[,2])
### Durations for each sim:
duration_i = unlist(lapply(res_i,length))
### Exinct runs in sim i:
ext_i = duration_i!=time_max
### Final N for each sim:
nX = unlist(lapply(res_i, function(x) tail(x,1)))
nX0 = nX
nX0[ext_i] = 0
### Proportions extinct:
paras[i, "EXT_PROP"] = sum(ext_i)/length(out)
### Mean duration:
paras[i, "MEAN_TIME"] = mean(duration_i)
### Mean pop growth rates.
### R is N(final)-N(initial)/N(initial), R0 is the same but using zero for N(final) if the pop went extinct.
paras[i, "MEAN_R"] = mean((nX-paras[i,"RESOURCE_INI"])/paras[i,"RESOURCE_INI"])
paras[i, "MEAN_R0"] = mean((nX0-paras[i,"RESOURCE_INI"])/paras[i,"RESOURCE_INI"])
}
par(mfrow = c(1,2))
meanE_matrix = xtabs(EXT_PROP ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
#meanE_matrix = meanE_matrix[1:5,1:10]
filled.contour(z = meanE_matrix, x = as.numeric(rownames(meanE_matrix)), y = as.numeric(colnames(meanE_matrix)),
xlab = "Ownership variation", ylab = "Budget variation",
nlevels = 10, col = rev(hcl.colors(10, "Reds")),
main = "Mean extinction probability", xaxt = "n")
scale_cols = function(nl,x) {
xl = seq(min(x),max(x),(max(x)-min(x))/nl)
colpal = "RdBu"
if(sum(xl<0)==length(xl)) {
colpal = "Reds"
}
if(sum(xl>0)==length(xl)) {
colpal = "Purples"
}
zero_pos =(1:length(xl))-which.min(abs(xl)); zero_pos
cols = hcl.colors(max(abs(zero_pos))*2,colpal)
mid_pos = floor(length(cols)/2)
return(cols[zero_pos+mid_pos])
}
meanR_matrix = xtabs(MEAN_R ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 10, color.palette = function(n, x) scale_cols(n, x=m),
main = "Mean growth rate", xaxt = "n")
#meanE_matrix = meanE_matrix[1:5,1:10]
filled.contour(z = meanE_matrix, x = as.numeric(rownames(meanE_matrix)), y = as.numeric(colnames(meanE_matrix)),
xlab = "Ownership variation", ylab = "Budget variation",
nlevels = 10, col = rev(hcl.colors(10, "Reds")),
main = "Mean extinction probability", xaxt = "n")
?filled.contour
image(meanE_matrix)
par(mfrow = c(1,1))
image(meanE_matrix)
### Data processing
source("helpers.R")
out = readRDS("sim_set_2/OUT.Rds")
### Reconstitute parameter values:
paras = as.data.frame(NULL)
for(i in 1:length(out)) {
paras = rbind(paras, as.data.frame(out[[i]]$paras))
}
### Calculate extinctions and length of sim "run" (i.e. number of years achieved)
paras$EXT_PROP = NA
paras$MEAN_TIME = NA
paras$MEAN_R = NA
paras$MEAN_R0 = NA
for(i in 1:length(out)) {
dat_i = out[[i]]$data
sim_length = NULL
n0 = paras[i, "RESOURCE_INI"]
time_max = paras[i, "TIME_MAX"]
### All resource runs for sim i:
res_i = lapply(dat_i, function(x) x$resources[,2])
### Durations for each sim:
duration_i = unlist(lapply(res_i,length))
### Exinct runs in sim i:
ext_i = duration_i!=time_max
### Final N for each sim:
nX = unlist(lapply(res_i, function(x) tail(x,1)))
nX0 = nX
nX0[ext_i] = 0
### Proportions extinct:
paras[i, "EXT_PROP"] = sum(ext_i)/length(out)
### Mean duration:
paras[i, "MEAN_TIME"] = mean(duration_i)
### Mean pop growth rates.
### R is N(final)-N(initial)/N(initial), R0 is the same but using zero for N(final) if the pop went extinct.
paras[i, "MEAN_R"] = mean((nX-paras[i,"RESOURCE_INI"])/paras[i,"RESOURCE_INI"])
paras[i, "MEAN_R0"] = mean((nX0-paras[i,"RESOURCE_INI"])/paras[i,"RESOURCE_INI"])
}
par(mfrow = c(1,2))
meanE_matrix = xtabs(EXT_PROP ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
#meanE_matrix = meanE_matrix[1:5,1:10]
filled.contour(z = meanE_matrix, x = as.numeric(rownames(meanE_matrix)), y = as.numeric(colnames(meanE_matrix)),
xlab = "Ownership variation", ylab = "Budget variation",
nlevels = 10, col = rev(hcl.colors(10, "Reds")),
main = "Mean extinction probability", xaxt = "n")
scale_cols = function(nl,x) {
xl = seq(min(x),max(x),(max(x)-min(x))/nl)
colpal = "RdBu"
if(sum(xl<0)==length(xl)) {
colpal = "Reds"
}
if(sum(xl>0)==length(xl)) {
colpal = "Purples"
}
zero_pos =(1:length(xl))-which.min(abs(xl)); zero_pos
cols = hcl.colors(max(abs(zero_pos))*2,colpal)
mid_pos = floor(length(cols)/2)
return(cols[zero_pos+mid_pos])
}
meanR_matrix = xtabs(MEAN_R ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
filled.contour(z = m, x = as.numeric(rownames(m)), y = as.numeric(colnames(m)),
nlevels = 10, color.palette = function(n, x) scale_cols(n, x=m),
main = "Mean growth rate", xaxt = "n")
meanE_matrix = xtabs(EXT_PROP ~ OWNERSHIP_VAR + USR_BUDGET_RNG, paras)
#meanE_matrix = meanE_matrix[1:5,1:10]
filled.contour(z = meanE_matrix, x = as.numeric(rownames(meanE_matrix)), y = as.numeric(colnames(meanE_matrix)),
xlab = "Ownership variation", ylab = "Budget variation",
nlevels = 10, col = rev(hcl.colors(10, "Reds")),
main = "Mean extinction probability", xaxt = "n")
